pathLib = require ('path')
fs = require('fs')

module.exports = class list
	constructor: (opts) ->
		@basePath = opts.basePath || __dirname
	
	get: (path, sorts, cb) ->
		if typeof sorts is "function"
			[cb, sorts] = [sorts, null];
		
		path = @normalizePath(path)
		@getList path,
			(err, data) =>
				return cb(err) if err
				sorts = @normalizeSort(sorts)
				data = @sort(data, sorts)
				cb(null, data, path)
	
	
	getList: (path, cb) ->
		@stat path,
			(err, stat) =>
				return cb(err) if err
				if stat.isDirectory()
					@list(path, cb)
				else
					cb(null, path)
	
	
	normalizePath: (path) ->
		path = pathLib.normalize(path)
		path = "/" if path.indexOf("../") != -1
		if (path.length > 1 && path[path.length-1] == "/")
			path = path.substr(0, path.length-1)
		pathLib.join(@basePath, path);
	
	
	normalizeSort: (sorts = []) ->
		if typeof sorts is "string"
			sorts={val: sorts}
		if isObject(sorts)
			sorts=[sorts]
		sorts
	
	
	stat: (path, cb) ->
		fs.stat(path, cb)
	
	
	list: (path, cb) ->
		fs.readdir path,
			(err, data) =>
				return cb(err) if err
				return cb(null, data) if !data.length
				
				_ERR = null
				wait = 0
				done = (i) =>
					wait++
					(err, stat) =>
						wait--
						return if _ERR
						return _err = true && cb(err) if err
						data[i] = @normalize_data(data[i], stat)
						cb(null, data) if (wait==0)
					
				for p, i in data
					@stat(pathLib.join(path, p), done(i))
	
	
	normalize_data: (name, stat) ->
		{
			name: name,
			isFile: stat.isFile(),
			size: stat.size,
			ctime: stat.ctime,
			mtime: stat.mtime
		}
	
	sort: (data, sorts) ->
		if (isArray(data) && isArray(sorts))
			data.sort (a,b) ->
				for s in sorts
					v = s.val
					asc = if s.desc then -1 else 1;
					return 1 * asc if a[v] > b[v];
					return -1* asc if a[v] > b[v];
				return 0
		data


isArray = (obj) ->
	return obj && obj.length && typeof obj == "object";

isObject = (obj) ->
	return obj && (typeof obj == "object") && (typeof obj.length == "undefined");