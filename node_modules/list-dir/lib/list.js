var pathLib = require('path');
var fs = require('fs');

var list = module.exports = function(opts){
	opts = opts || {};
	this.basePath = opts.basePath || __dirname;
};

list.prototype.get = function(path, sorts, cb){
	if (typeof sorts == "function") {
		cb = sorts;
		sorts = null;
	}
	
	path = this.normalizePath(path);
	var self = this;
	this.getList(path, function(err, data){
		if (err) return cb(err);
		sorts = self.normalizeSort(sorts);
		data = self.sort(data, sorts);
		cb(null, data, path);
	});
};


list.prototype.getList = function(path, cb){
	var self = this;
	this.stat(path, function(err, stat){
		if (err) return cb(err);
		if (stat.isDirectory()) {
			self.list(path, cb);
		} else {
			cb(null, path);
		}
	});
};

list.prototype.normalizePath = function(path){
	path = pathLib.normalize(path);
	if (path.indexOf('../') == 0) { // how? o_O
		path = '/';
	}
	if (path.length > 1 && path[path.length-1] == "/") {
		path = path.substr(0, path.length-1);
	}
	return pathLib.join(this.basePath, path);
};

list.prototype.normalizeSort = function(sorts){
	if (sorts) {
		if (typeof sorts == "string") {
			sorts = { val: sorts };
		}
		if ( isObject(sorts) ) {
			sorts = [sorts];
		}
		return sorts;
	} else {
		return [];
	}
};

list.prototype.stat = function(path, cb){
	fs.stat(path, cb);
};

list.prototype.list = function(path, cb){
	var self = this;
	fs.readdir(path, function(err, data){
		if (err) return cb(err);
		if (!data.length) return cb(null, data);
		
		// предположим, что нам важен весь массив данных, поэтому возвращаем ошибку, если не получилось получить стат хотябы по одному эл-ту
		var _ERR;
		var wait=0;
		var done = function(i) {
			wait++;
			return function(err, stat){
				wait--;
				if (_ERR) return;
				if (err) {
					_ERR = true;
					return cb(err);
				}
				data[i] = self.normalize_data(data[i], stat);
				if (wait==0) {
					cb(null, data);
				}
			};
		};
		
		for (var i=0, l=data.length; i<l; i++){
			self.stat(pathLib.join(path, data[i]), done(i));
		}
	});
};

list.prototype.normalize_data = function(name, stat){
	return {
		name: name,
		isFile: stat.isFile(),
		size: stat.size,
		ctime: stat.ctime,
		mtime: stat.mtime
	}
};


list.prototype.sort = function(data, sorts){
	if ( isArray(data) && isArray(sorts) ) {
		data.sort(function(a, b){
			for (var i=0, l=sorts.length; i<l; i++) {
				var v = sorts[i].val;
				var asc = sorts[i].desc ? -1 : 1;
				if (a[v] > b[v]) {
					return 1 * asc;
				} else if (a[v] < b[v]){
					return -1 * asc;
				}
			}
			return 0;
		});
	}
	return data;
};

function isArray (obj){
	return obj && obj.length && typeof obj == "object";
};

function isObject (obj) {
	return obj && (typeof obj == "object") && (typeof obj.length == "undefined");
}
